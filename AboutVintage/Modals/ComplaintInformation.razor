@using System.Net
@using AboutVintage.Data
@using AboutVintageWebAppLibrary
@using Blazored.Modal
@using Blazored.Modal.Services
@using Blazored.Toast.Services
@using DataAccessLibrary
@using EfDataAccessLibrary.Models
@inject IModalService Modal
@inject IToastService toastService
@inject IComplaintData _db
@inject OrderComplaintContextServices OrderComplaintContextServices

<div class="container-fluid">
    <EditForm Model=ComplaintInfo OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <div class="row content">
            <div class="col-sm-4"><label for="Date">Date</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <InputDate @bind-Value:format="dd/MM/yyyy" @bind-Value=ComplaintInfo.Date class="form-control form-control-sm" id="Date" />
                    <ValidationMessage For="@(() => ComplaintInfo.Date)" />
                }
                else
                {
                    @ComplaintInfo.Date.ToString("dd-MM-yyyy")
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="OrderNumber">OrderNumber</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <BlazoredTypeahead SearchMethod="@SearchOrderNumbers"
                                       @bind-Value="ComplaintInfo.OrderNumber"
                                       ConvertMethod="ConvertOrderComplaint"
                                       Debounce="500">
                        <SelectedTemplate Context="complaint">
                            @complaint
                        </SelectedTemplate>
                        <ResultTemplate Context="complaint">
                            @complaint.OrderNumber (@complaint.CreatedDate.ToShortDateString())
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Sorry, there weren't any search results.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                    <ValidationMessage For="@(() => ComplaintInfo.OrderNumber)" />
                }
                else
                {
                    @ComplaintInfo.OrderNumber
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="CustomerName">CustomerName</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <InputText @bind-Value=ComplaintInfo.CustomerName class="form-control form-control-sm" id="CustomerName" />
                    <ValidationMessage For="@(() => ComplaintInfo.CustomerName)" />
                }
                else
                {
                    @ComplaintInfo.CustomerName
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="OrderDate">OrderDate</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <InputDate @bind-Value=ComplaintInfo.OrderDate class="form-control form-control-sm" id="OrderDate" />
                    <ValidationMessage For="@(() => ComplaintInfo.OrderDate)" />
                }
                else
                {
                    @ComplaintInfo.OrderDate.ToString("dd-MM-yyyy")
                }

            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="ProductType">ProductType</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <InputSelect @bind-Value=ComplaintInfo.ProductType class="form-control form-control-sm" id="ProductType">
                        <option>Watch</option>
                        <option>Strap</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => ComplaintInfo.ProductType)" />
                }
                else
                {
                    @ComplaintInfo.ProductType
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="ProductVariant">ProductVariant</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <BlazoredTypeahead SearchMethod="@SearchVariants"
                                       @bind-Value="ComplaintInfo.ProductVariant"
                                       ConvertMethod="ConvertOrderVariant"
                                       ShowDropDownOnFocus="true">
                        <SelectedTemplate Context="variant">
                            @variant
                        </SelectedTemplate>
                        <ResultTemplate Context="variant">
                            @variant.Title - @variant.SKU
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Sorry, there weren't any search results.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                    <ValidationMessage For="@(() => ComplaintInfo.ProductVariant)" />
                }
                else
                {
                    @ComplaintInfo.ProductVariant
                }
            </div>
        </div>

        @if (ComplaintInfo.ProductType.Equals("Watch"))
        {
            <div class="row content">
                <div class="col-sm-4"><label for="WatchProducer">WatchProducer</label></div>
                <div class="col-sm-6">
                    @if (ComplaintInfo.IsEditing)
                    {
                        <BlazoredTypeahead SearchMethod="@SearchProducers"
                                           @bind-Value="ComplaintInfo.WatchProducer"
                                           ShowDropDownOnFocus="true">
                            <SelectedTemplate Context="producer">
                                @producer
                            </SelectedTemplate>
                            <ResultTemplate Context="producer">
                                @producer
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Sorry, there weren't any search results.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                        <ValidationMessage For="@(() => ComplaintInfo.WatchProducer)" />
                    }
                    else
                    {
                        @ComplaintInfo.WatchProducer
                    }
                </div>
            </div>

            <div class="row content">
                <div class="col-sm-4"><label for="WatchNumber">WatchNumber</label></div>
                <div class="col-sm-6">
                    @if (ComplaintInfo.IsEditing)
                    {
                        <InputNumber @bind-Value=ComplaintInfo.WatchNumber class="form-control form-control-sm" id="WatchNumber" />
                        <ValidationMessage For="@(() => ComplaintInfo.WatchNumber)" />
                    }
                    else
                    {
                        @ComplaintInfo.WatchNumber
                    }
                </div>
            </div>
        }

        <div class="row content">
            <div class="col-sm-4"><label for="Error">Error</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <BlazoredTypeahead SearchMethod="@SearchErrors"
                                       @bind-Value="ComplaintInfo.Error"
                                       ShowDropDownOnFocus="true">
                        <SelectedTemplate Context="error">
                            @error
                        </SelectedTemplate>
                        <ResultTemplate Context="error">
                            @error
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Sorry, there weren't any search results.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                    <ValidationMessage For="@(() => ComplaintInfo.Error)" />
                }
                else
                {
                    @ComplaintInfo.Error
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="Solution">Solution</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <BlazoredTypeahead SearchMethod="@SearchSolutions"
                                       @bind-Value="ComplaintInfo.Solution"
                                       ShowDropDownOnFocus="true">
                        <SelectedTemplate Context="complaint">
                            @complaint
                        </SelectedTemplate>
                        <ResultTemplate Context="complaint">
                            @complaint
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Sorry, there weren't any search results.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                    <ValidationMessage For="@(() => ComplaintInfo.Solution)" />
                }
                else
                {
                    @ComplaintInfo.Solution
                }
            </div>
        </div>

        <div class="row content">
            <div class="col-sm-4"><label for="Comments">Comments</label></div>
            <div class="col-sm-6">
                @if (ComplaintInfo.IsEditing)
                {
                    <InputTextArea @bind-Value=ComplaintInfo.Comments class="form-control form-control-sm" id="Comments" />
                    <ValidationMessage For="@(() => ComplaintInfo.Comments)" />
                }
                else
                {
                    @ComplaintInfo.Comments
                }
            </div>
        </div>

        @if (ComplaintInfo.IsEditing)
        {
            <div class="btn-group btn-group-sm float-right" role="group">
                <button @onclick="@(() => Edit(ComplaintInfo))" type="button" class="btn btn-danger"><i class="oi oi-ban"></i></button>
                <button type="submit" class="btn btn-success"><i class="oi oi-check"></i></button>
            </div>
        }
        else
        {
            <div class="btn-group btn-group-sm, float-right" role="group">
                <button @onclick="@(() => Edit(ComplaintInfo))" type="button" class="btn btn-primary"><i class="oi oi-pencil"></i></button>
                <button @onclick="Delete" type="button" class="btn btn-danger"><i class="oi oi-trash"></i></button>
            </div>
        }

    </EditForm>
</div>

@code {
        [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
        [Parameter] public ComplaintModel ComplaintInfo { get; set; }
        [Parameter] public List<ComplaintModel> _complaints { get; set; }

        private async Task KeyWasPressed(KeyboardEventArgs args, EditContext editContext)
        {
            Console.WriteLine(args.Key);
            if (args.Key.Equals("Enter"))
            {
                if (editContext.Validate())
                {
                    await Update();
                }
            }
            else if (args.Key.Equals("Escape"))
            {
                BlazoredModal.Cancel();
            }
        }

        private ComplaintModel complaintBeforeEdit;

        private void Edit(ComplaintModel complaint)
        {
            if (!complaint.IsEditing)
            {
                complaintBeforeEdit = new ComplaintModel();
                complaintBeforeEdit.Date = complaint.Date;
                complaintBeforeEdit.CustomerName = complaint.CustomerName;
                complaintBeforeEdit.ProductVariant = complaint.ProductVariant;
                complaintBeforeEdit.OrderNumber = complaint.OrderNumber;
                complaintBeforeEdit.Comments = complaint.Comments;
                complaintBeforeEdit.Error = complaint.Error;
                complaintBeforeEdit.Solution = complaint.Solution;
                complaintBeforeEdit.WatchNumber = complaint.WatchNumber;
                complaintBeforeEdit.WatchProducer = complaint.WatchProducer;
                complaintBeforeEdit.OrderDate = complaint.OrderDate;
                complaintBeforeEdit.ProductType = complaint.ProductType;
            }
            if (complaint.IsEditing)
            {
                complaint.Date = complaintBeforeEdit.Date;
                complaint.CustomerName = complaintBeforeEdit.CustomerName;
                complaint.ProductVariant = complaintBeforeEdit.ProductVariant;
                complaint.OrderNumber = complaintBeforeEdit.OrderNumber;
                complaint.Comments = complaintBeforeEdit.Comments;
                complaint.Error = complaintBeforeEdit.Error;
                complaint.Solution = complaintBeforeEdit.Solution;
                complaint.WatchNumber = complaintBeforeEdit.WatchNumber;
                complaint.WatchProducer = complaintBeforeEdit.WatchProducer;
                complaint.OrderDate = complaintBeforeEdit.OrderDate;
                complaint.ProductType = complaintBeforeEdit.ProductType;
            };

            complaint.IsEditing = !complaint.IsEditing;
        }

        private async Task Update()
        {
            if (complaintBeforeEdit.Date == ComplaintInfo.Date &&
            complaintBeforeEdit.CustomerName == ComplaintInfo.CustomerName &&
            complaintBeforeEdit.ProductVariant == ComplaintInfo.ProductVariant &&
            complaintBeforeEdit.OrderNumber == ComplaintInfo.OrderNumber &&
            complaintBeforeEdit.Comments == ComplaintInfo.Comments &&
            complaintBeforeEdit.Error == ComplaintInfo.Error &&
            complaintBeforeEdit.Solution == ComplaintInfo.Solution &&
            complaintBeforeEdit.WatchNumber == ComplaintInfo.WatchNumber &&
            complaintBeforeEdit.WatchProducer == ComplaintInfo.WatchProducer &&
            complaintBeforeEdit.OrderDate == ComplaintInfo.OrderDate &&
            complaintBeforeEdit.ProductType == ComplaintInfo.ProductType)
            {
                toastService.ShowInfo("Nothing has changed");
                ComplaintInfo.IsEditing = false;
            }
            else
            {
                try
                {
                    await _db.UpdateComplaint(ComplaintInfo);
                    ComplaintInfo.IsEditing = false;
                    toastService.ShowSuccess($"#{ComplaintInfo.Id} was updated", "Updated");

                    BlazoredModal.Close();
                }
                catch
                {
                    toastService.ShowError("Something went wrong");
                }
            }
        }

        private async Task Delete()
        {
            var parameter = new ModalParameters();
            parameter.Add("DeleteComplaint", ComplaintInfo);

            var formModal = Modal.Show<SureToDeleteComplaint>("Are you sure to delete?", parameter);
            var result = await formModal.Result;

            if (!result.Cancelled)
            {
                try
                {
                    await _db.DeleteComplaint(ComplaintInfo.Id);

                    toastService.ShowSuccess($"#{ComplaintInfo.Id} was deleted", "Deletion succeeded");

                    _complaints.Remove(ComplaintInfo);

                    BlazoredModal.Close();
                }
                catch
                {
                    toastService.ShowError("Something went wrong");
                }
            }
        }

        private async Task<IEnumerable<OrderComplaint>> SearchOrderNumbers(string searchText)
        {
            var response = await Task.Run(() =>
                OrderComplaintContextServices.GetOrderComplaintsByOrderNumber(searchText));
            return response;
        }

        public List<Variant> OrderVariants { get; set; } = new List<Variant>();

        public string ConvertOrderComplaint(OrderComplaint orderComplaint)
        {
            ComplaintInfo.OrderDate = orderComplaint.CreatedDate;

            if (orderComplaint.Customerer != null) ComplaintInfo.CustomerName
                = orderComplaint.Customerer.FirstName + " " + orderComplaint.Customerer.LastName;
            else ComplaintInfo.CustomerName = "Not informed";

            OrderVariants = orderComplaint.Variants;

            return orderComplaint.OrderNumber;
        }

        public string ConvertOrderVariant(Variant variant)
        {
            return variant.Title;
        }

        private async Task<IEnumerable<string>> SearchSolutions(string searchText)
        {
            IEnumerable<string> response;
            if (ComplaintInfo.ProductType.Equals("Watch")) response = WatchSolutionSuggestions.Where(s => s.ToLower().Contains(searchText.ToLower()));
            else response = StrapSolutionSuggestions.Where(s => s.ToLower().Contains(searchText.ToLower()));

            if (!response.Any() && !string.IsNullOrEmpty(searchText))
            {
                IEnumerable<string> second = new[] { searchText };

                response = response.Concat(second);

                ComplaintInfo.Solution = searchText;
            }

            return response;
        }

        private async Task<IEnumerable<string>> SearchErrors(string searchText)
        {
            IEnumerable<string> response;
            if (ComplaintInfo.ProductType.Equals("Watch")) response = WatchErrorSuggestions.Where(s => s.ToLower().Contains(searchText.ToLower()));
            else response = StrapErrorSuggestions.Where(s => s.ToLower().Contains(searchText.ToLower()));

            if (!response.Any() && !string.IsNullOrEmpty(searchText))
            {
                IEnumerable<string> second = new[] { searchText };

                response = response.Concat(second);

                ComplaintInfo.Error = searchText;
            }

            return response;
        }

        private async Task<IEnumerable<string>> SearchProducers(string searchText)
        {
            IEnumerable<string> response = WatchProducers.Where(s => s.ToLower().Contains(searchText.ToLower()));

            if (!response.Any() && !string.IsNullOrEmpty(searchText))
            {
                IEnumerable<string> second = new[] { searchText };

                response = response.Concat(second);

                ComplaintInfo.Error = searchText;
            }

            return response;
        }

        private async Task<IEnumerable<Variant>> SearchVariants(string searchText)
        {
            var response = OrderVariants.Where(v => v.Title.ToLower().Contains(searchText.ToLower()) || v.SKU.ToLower().Contains(searchText.ToLower()));

            return response;
        }

        private List<string> WatchErrorSuggestions = new List<string>();
        private List<string> StrapErrorSuggestions = new List<string>();
        private List<string> WatchSolutionSuggestions = new List<string>();
        private List<string> StrapSolutionSuggestions = new List<string>();
        private List<string> WatchProducers = new List<string>();

        protected override void OnInitialized()
        {
            WatchErrorSuggestions.AddRange(new List<string>() {
            "Looses time",
            "Number fallen off",
            "Crown fallen off",
            "Dot fallen off",
            "Hand fallen off",
            "Glass cracked",
            "Condensation",
            "Loose hand",
            "Loose bezel",
            "Case error",
            "Battery"
        });

            StrapErrorSuggestions.AddRange(new List<string>() {
            "Quick release error",
            "Link error",
            "Butterfly clasp error"
        });

            WatchSolutionSuggestions.AddRange(new List<string>() {
            "Exchanged wacth",
            "Changed battery"
        });

            StrapSolutionSuggestions.AddRange(new List<string>() {
            "Exchanged strap",
            "Changed link"
        });

            WatchProducers.AddRange(new List<string>() {
            "Owago"
        });
        }

    }
